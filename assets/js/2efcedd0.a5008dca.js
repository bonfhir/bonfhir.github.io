"use strict";(self.webpackChunk_bonfhir_docs=self.webpackChunk_bonfhir_docs||[]).push([[50],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),h=l(n),d=r,m=h["".concat(s,".").concat(d)]||h[d]||c[d]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[h]="string"==typeof e?e:r,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>u,metadata:()=>l,toc:()=>h});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),o=n(5162);const u={sidebar_position:1},s="FHIR Query",l={unversionedId:"ui/fhir-query",id:"ui/fhir-query",title:"FHIR Query",description:"npm",source:"@site/packages/ui/fhir-query.md",sourceDirName:"ui",slug:"/ui/fhir-query",permalink:"/packages/ui/fhir-query",draft:!1,editUrl:"https://github.com/bonfhir/bonfhir/tree/main/packages/docs/packages/ui/fhir-query.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"UI",permalink:"/packages/category/ui"},next:{title:"UI Components",permalink:"/packages/ui/ui-components"}},p={},h=[{value:"Getting started",id:"getting-started",level:2},{value:"Available hooks",id:"available-hooks",level:2},{value:"<code>useFhirRead</code>",id:"usefhirread",level:3},{value:"<code>useFhirVRead</code>",id:"usefhirvread",level:3},{value:"<code>useFhirHistory</code>",id:"usefhirhistory",level:3},{value:"<code>useFhirSearch</code>",id:"usefhirsearch",level:3},{value:"<code>useFhirCapabilities</code>",id:"usefhircapabilities",level:3},{value:"<code>useFhirExecute</code>",id:"usefhirexecute",level:3},{value:"<code>useFhirUpdateMutation</code>",id:"usefhirupdatemutation",level:3},{value:"<code>useFhirPatchMutation</code>",id:"usefhirpatchmutation",level:3},{value:"<code>useFhirDeleteMutation</code>",id:"usefhirdeletemutation",level:3},{value:"<code>useFhirCreateMutation</code>",id:"usefhircreatemutation",level:3},{value:"<code>useFhirExecuteMutation</code>",id:"usefhirexecutemutation",level:3},{value:"Configuration",id:"configuration",level:2}],c={toc:h};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fhir-query"},"FHIR Query"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@bonfhir/fhir-query"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@bonfhir/fhir-query",alt:"npm"}))),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @bonfhir/fhir-query @tanstack/react-query\n"))),(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @bonfhir/fhir-query @tanstack/react-query\n")))),(0,r.kt)("p",null,"This package provides a solution for managing data-fetching and caching server data in\na ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React / React Native")," application."),(0,r.kt)("p",null,"It is based on ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest"},"TanStack React Query"),"."),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"We ",(0,r.kt)("strong",{parentName:"em"},"strongly")," advise that you start by familiarizing yourself with ",(0,r.kt)("a",{parentName:"em",href:"https://tanstack.com/query/latest"},"React Query"),"\nfirst, as this package builds on top of it, but all the concepts are exposed.")),(0,r.kt)("p",null,"Here is a sample usage of the library:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { build } from "@bonfhir/core/r4b";\nimport { FhirQueryProvider, useFhirCreateMutation, useFhirSearch } from "@bonfhir/fhir-query/r4b";\n\nfunction App() {\n\n  // Instantiate a FhirRestfulClient somewhere...\n  const fhirClient = ...;\n\n  return (\n    <FhirQueryProvider fhirClient={fhirClient}>\n      <PatientList />\n    </FhirQueryProvider>\n  )\n}\n\nfunction PatientList() {\n  const patientsQuery = useFhirSearch("Patient", (search) => search._count(20));\n\n  const createPatientMutation = useFhirCreateMutation("Patient");\n\n  if(patientsQuery.isInitialLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <ul>\n        {patientsQuery.data?.nav.searchMatch().map((patient) => (\n          <li key={patient.id}>{patient.id}</li>\n        ))}\n      </ul>\n\n      <button onClick={() => createPatientMutation.mutate({\n        body: build("Patient", { name: [{ given: ["Miles"], family: "Davis" }] })\n      })}>\n    </div>\n  );\n}\n')),(0,r.kt)("p",null,"In this example, we retrieve a list of patients using a ",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#search"},"search")," query,\nand we also create new patients using a ",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#create"},"create")," mutation."),(0,r.kt)("p",null,"You'll notice that the cache invalidation is performed automatically, so the patient list is automatically refreshed\nas soon as the new patient is created.\nThe list is also refreshed automatically in the background when the window is refocused or the network is reconnected.\nPlease see ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/important-defaults"},"React Query Important Default")," to\nunderstand the default behavior."),(0,r.kt)("p",null,"Here is a sample code that uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.medplum.com/"},"Medplum")," and ",(0,r.kt)("a",{parentName:"p",href:"/packages/integrations/medplum"},"Bonfhir Medplum adapter")," to initialize the provider:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FhirQueryProvider } from "@bonfhir/fhir-query/r4b";\nimport { buildFhirRestfulClientAdapter } from "@bonfhir/medplum/r4b";\nimport { MedplumClient } from "@medplum/core";\nimport { ReactQueryDevtools } from "@tanstack/react-query-devtools";\nimport { useEffect, useMemo } from "react";\n\nfunction App() {\n  const medplum = useMemo(\n    () =>\n      new MedplumClient({\n        // Medplum configuration goes here.\n      }),\n    []\n  );\n\n  useEffect(() => {\n    if (!medplum.getActiveLogin()) {\n      // This is medplum Open ID Connect flow; other options exists - see https://www.medplum.com/docs/auth\n      medplum.signInWithRedirect({\n        clientId: process.env.MEDPLUM_CLIENT_ID,\n        redirectUri: window.location.origin.endsWith("/")\n          ? window.location.origin\n          : `${window.location.origin}/`,\n      });\n    }\n  }, [medplum, medplum.getActiveLogin()?.profile?.reference]);\n\n  const fhirClient = useMemo(() => {\n    if (!medplum) {\n      return undefined;\n    }\n    return buildFhirRestfulClientAdapter(medplum);\n  }, [medplum]);\n\n  if (!fhirClient) {\n    return null;\n  }\n\n  if (!medplum.getActiveLogin()) {\n    return null;\n  }\n\n  return (\n    <FhirQueryProvider fhirClient={fhirClient}>\n      <PatientList />\n      <ReactQueryDevtools />\n    </FhirQueryProvider>\n  );\n}\n')),(0,r.kt)("p",null,"This example also shows how to use ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/devtools"},"React Query DevTools"),",\nwhich we recommend you use to easily visualize the content of the query cache."),(0,r.kt)("h2",{id:"available-hooks"},"Available hooks"),(0,r.kt)("h3",{id:"usefhirread"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirRead")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#read"},"read")," request."),(0,r.kt)("p",null,"If the option to ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," is enabled (default behavior), ",(0,r.kt)("inlineCode",{parentName:"p"},"useFhirRead")," will also hunt for a resource in the ",(0,r.kt)("inlineCode",{parentName:"p"},"search"),"\noperation cache to preload initial data. This makes master/detail scenarios quite snappy by having the data\nalready fetched when looking at details."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirRead } from "@bonfhir/fhir-query/r4b";\n\nconst organizationQuery = useFhirRead(\n  "Organization",\n  "a942b3d5-19bc-4959-8b5d-f9aedd790a94",\n  { throwIfNotFound: true } // Will set an error if not found, instead of just returning undefined.\n);\n\nif (organizationQuery.isInitialLoading) {\n  return <div>Loading...</div>;\n}\n\nif (organizationQuery.isError) {\n  return <div>{organizationQuery.error?.message}</div>;\n}\n\nreturn <div>{organizationQuery.data?.name}</div>;\n')),(0,r.kt)("h3",{id:"usefhirvread"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirVRead")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#vread"},"vread")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirVRead } from "@bonfhir/fhir-query/r4b";\n\nconst organizationQuery = useFhirVRead(\n  "Organization",\n  "a942b3d5-19bc-4959-8b5d-f9aedd790a94",\n  "9e75a8da-79cf-4ade-a095-6fd7419d8c96"\n);\n\nif (organizationQuery.isInitialLoading) {\n  return <div>Loading...</div>;\n}\n\nif (organizationQuery.isError) {\n  return <div>{organizationQuery.error?.message}</div>;\n}\n\nreturn <div>{organizationQuery.data?.name}</div>;\n')),(0,r.kt)("h3",{id:"usefhirhistory"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirHistory")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#history"},"history")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirHistory } from "@bonfhir/fhir-query/r4b";\n\nconst organizationHistoryQuery = useFhirHistory(\n  "Organization",\n  "a942b3d5-19bc-4959-8b5d-f9aedd790a94"\n);\n\nif (organizationHistoryQuery.isInitialLoading) {\n  return <div>Loading...</div>;\n}\n\nif (organizationHistoryQuery.isError) {\n  return <div>{organizationQuery.error?.message}</div>;\n}\n\nreturn (\n  <ul>\n    {organizationHistoryQuery.data?.nav.type("Organization").map((org) => (\n      <li>{org.meta?.versionId}</li>\n    ))}\n  </ul>\n);\n')),(0,r.kt)("h3",{id:"usefhirsearch"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirSearch")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#search"},"search")," request."),(0,r.kt)("p",null,"This version of the search is the one to choose if you want total control over pagination, as it does not attempt to\ncontrol it. However, it allows you to perform the initial query, and to pass any subsequent\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/bundle-definitions.html#Bundle.link"},"link")," url to navigate across pages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirSearch } from "@bonfhir/fhir-query/r4b";\n\nconst organizationSearchQuery = useFhirSearch("Organization", (search) =>\n  search.type("govt")._count(20)._sort("name")\n);\n\nif (organizationSearchQuery.isInitialLoading) {\n  return <div>Loading...</div>;\n}\n\nif (organizationSearchQuery.isError) {\n  return <div>{organizationSearchQuery.error?.message}</div>;\n}\n\nreturn (\n  <ul>\n    {organizationSearchQuery.data?.nav.type("Organization").map((org) => (\n      <li>{org.name}</li>\n    ))}\n  </ul>\n);\n')),(0,r.kt)("p",null,"Search parameters can be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("a",{parentName:"li",href:"/packages/foundation/core#resources-search"},(0,r.kt)("inlineCode",{parentName:"a"},"resourceSearch")," builder")),(0,r.kt)("li",{parentName:"ul"},"a raw ",(0,r.kt)("a",{parentName:"li",href:"https://hl7.org/fhir/search.html"},"FHIR Search")," string"),(0,r.kt)("li",{parentName:"ul"},"or an absolute URL returned by a previous search execution to navigate across pages")),(0,r.kt)("p",null,"Example pagination usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'\n// You can substitute this for a URL query parameters, this way you have stable/shareable URLs\nconst [pageUrl, setPageUrl] = useState("");\n\nconst organizationSearchQuery = useFhirSearch("Organization", (search) =>\n  pageUrl || search._count(20)._sort("name")\n);\n\nconst nextUrl = nextUrl(organizationSearchQuery.data?.bundle);\n\nreturn (\n  <ul>\n    {organizationSearchQuery.data?.nav.type("Organization").map((org) => (\n      <li>{org.name}</li>\n    ))}\n  </ul>\n  {nextUrl && <button onClick={() => setPageUrl(nextUrl)}>Next</button>}\n);\n\n')),(0,r.kt)("h3",{id:"usefhircapabilities"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirCapabilities")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#capabilities"},"capabilities")," request."),(0,r.kt)("h3",{id:"usefhirexecute"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirExecute")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/queries"},"Query")," for an\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/operations.html"},"operation")," request."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/operationslist.html"},"FHIR Operations List")," for the default operations supported by FHIR."),(0,r.kt)("p",null,"This hook is for operations that have no side-effect (e.g. do not create. update or delete a resource), such as\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/valueset-operation-expand.html"},"ValueSet Expansion"),"."),(0,r.kt)("p",null,"If this is not the case, please use the ",(0,r.kt)("a",{parentName:"p",href:"#usefhirexecutemutation"},(0,r.kt)("inlineCode",{parentName:"a"},"useFhirExecuteMutation"))," hook instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirExecute } from "@bonfhir/fhir-query/r4b";\n\nconst addressUseExpansionQuery = useFhirExecute<ValueSet>(\n  "$expand",\n  {\n    type: "ValueSet",\n    parameters: { url: "http://hl7.org/fhir/ValueSet/address-use" },\n  },\n  {\n    cacheTime: Infinity,\n  }\n);\n\nif (addressUseExpansionQuery.isInitialLoading) {\n  return <div>Loading...</div>;\n}\n\nif (addressUseExpansionQuery.isError) {\n  return <div>{organizationQuery.error?.message}</div>;\n}\n\nreturn (\n  <ul>\n    {result.current.data?.expansion?.contains?.map((x) => (\n      <li>{x.code}</li>\n    ))}\n  </ul>\n);\n')),(0,r.kt)("h3",{id:"usefhirupdatemutation"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirUpdateMutation")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/mutations"},"Mutation")," for an\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#update"},"update")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirUpdateMutation } from "@bonfhir/fhir-query/r4b";\n\nconst practitionerMutation = useFhirUpdateMutation("Practitioner", {\n  onSuccess: (practitioner) => {\n    navigate("/home");\n  }\n);\n\nreturn <button onClick={() => practitionerMutation.mutate({ body: practitioner })}>Update!</button>;\n')),(0,r.kt)("p",null,"If the option to ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," is enabled (default behavior), ",(0,r.kt)("inlineCode",{parentName:"p"},"useFhirUpdateMutation")," automatically invalidates all\nqueries involving the updated resource on success (e.g. searches and reads), and also update the read cache with the\nlatest version of the resource."),(0,r.kt)("h3",{id:"usefhirpatchmutation"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirPatchMutation")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/mutations"},"Mutation")," for an\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#patch"},"patch")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirPatchMutation } from "@bonfhir/fhir-query/r4b";\n\nconst organizationMutation = useFhirPatchMutation("Organization", {\n  onSuccess: (organization) => {\n    navigate("/home");\n  }\n);\n\nreturn <button onClick={() => organizationMutation.mutate({\n  id: "39a43e23-46dd-4f05-948e-2e9d29ece4ab",\n  body: [{ op: "replace", path: "/name", value: "new name" }],\n})}>Update!</button>;\n')),(0,r.kt)("p",null,"If the option to ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," is enabled (default behavior), ",(0,r.kt)("inlineCode",{parentName:"p"},"useFhirPatchMutation")," automatically invalidates all\nqueries involving the updated resource on success (e.g. searches and reads), and also update the read cache with the\nlatest version of the resource."),(0,r.kt)("h3",{id:"usefhirdeletemutation"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirDeleteMutation")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/mutations"},"Mutation")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#delete"},"delete")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirDeleteMutation } from "@bonfhir/fhir-query/r4b";\n\nconst deleteMutation = useFhirDeleteMutation({\n  onSuccess: (practitioner) => {\n    navigate("/home");\n  }\n);\n\nreturn <button onClick={() => deleteMutation.mutate({\n  type: "Communication"\n  id: "066273a1-c81d-4a05-9d0c-e44e56d67a63",\n})}>Delete!</button>;\n')),(0,r.kt)("p",null,"If the option to ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," is enabled (default behavior), ",(0,r.kt)("inlineCode",{parentName:"p"},"useFhirDeleteMutation")," automatically invalidates all\nqueries involving the updated resource on success (e.g. searches and reads)."),(0,r.kt)("h3",{id:"usefhircreatemutation"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirCreateMutation")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/mutations"},"Mutation")," for a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html#create"},"create")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { build } from "@bonfhir/core/r4b";\nimport { useFhirCreateMutation } from "@bonfhir/fhir-query/r4b";\n\nconst patientMutation = useFhirCreateMutation("Patient", {\n  onSuccess: (patient) => {\n    navigate(`/patients/${patient.id}`);\n  }\n);\n\nreturn <button onClick={() => patientMutation.mutate({ body: build("Patient", { active: true }) })}>Create!</button>;\n')),(0,r.kt)("p",null,"If the option to ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," is enabled (default behavior), ",(0,r.kt)("inlineCode",{parentName:"p"},"useFhirCreateMutation")," automatically invalidates all\nqueries involving the created resource on success (e.g. searches and reads), and also update the read cache with the\nlatest version of the resource."),(0,r.kt)("h3",{id:"usefhirexecutemutation"},(0,r.kt)("inlineCode",{parentName:"h3"},"useFhirExecuteMutation")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/mutations"},"Mutation")," for an\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/operations.html"},"operation")," request."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/operationslist.html"},"FHIR Operations List")," for the default operations supported by FHIR."),(0,r.kt)("p",null,"This is the hook to use to run an operation with side-effects, such as\n",(0,r.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/claim-operation-submit.html"},"Submit a Claim resource for adjudication"),"."),(0,r.kt)("p",null,"If the operation does not have side-effects and you want to cache the result, please use the\n",(0,r.kt)("a",{parentName:"p",href:"#usefhirexecutemutation"},(0,r.kt)("inlineCode",{parentName:"a"},"useFhirExecute"))," hook instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useFhirExecuteMutation } from "@bonfhir/fhir-query/r4b";\n\nconst executeMutation = useFhirExecuteMutation({\n  onSuccess: (claim) => {\n    navigate(`/home`);\n  }\n);\n\nreturn <button onClick={() => executeMutation.mutate("$submit", { type: "Claim", parameters: { ... } })}>Submit!</button>;\n')),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"All configuration option applicable to\n",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/guides/important-defaults"},"React Query")," are valid."),(0,r.kt)("p",null,"If you opt to let ",(0,r.kt)("inlineCode",{parentName:"p"},"FhirQueryProvider")," create the ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/QueryClient"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryClient")),"\ninstance, you can still use the ",(0,r.kt)("inlineCode",{parentName:"p"},"queryClientConfig")," prop to configure it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FhirQueryProvider } from "@bonfhir/fhir-query/r4b";\nimport { QueryClientConfig } from "@tanstack/react-query";\n\nfunction App() {\n\n  // Instantiate a FhirRestfulClient somewhere...\n  const fhirClient = ...;\n\n  const queryClientConfig: QueryClientConfig = {\n      defaultOptions: {\n      queries: {\n        networkMode: "always"\n      }\n    }\n  };\n\n  return (\n    <FhirQueryProvider fhirClient={fhirClient}, queryClientConfig={queryClientConfig}>\n      <PatientList />\n    </FhirQueryProvider>\n  )\n}\n')),(0,r.kt)("p",null,"By default, all hooks have behavior to manage the query cache in a manner that makes sense, and include invalidation\nand optimization code that should work for a standard app."),(0,r.kt)("p",null,"If you want to fully control the cache behavior, you can opt out of this by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"manageCache")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FhirQueryProvider } from "@bonfhir/fhir-query/r4b";\n\nfunction App() {\n\n  // Instantiate a FhirRestfulClient somewhere...\n  const fhirClient = ...;\n\n  return (\n    <FhirQueryProvider fhirClient={fhirClient}, manageCache={false}>\n      <PatientList />\n    </FhirQueryProvider>\n  )\n}\n')),(0,r.kt)("p",null,"Be aware that you will need to manage cache invalidation for mutations manually.\nIf you want to have access to the ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/guides/query-keys"},"query keys")," used by\nthe default hooks, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FhirQueryKeys")," utility:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FhirQueryKeys } from "@bonfhir/fhir-query/r4b";\n\n// Example of the query key used by `useFhirRead`:\nconst queryKey = FhirQueryKeys.read(\n  "Patient",\n  "84d5d265-27ff-45a5-b449-8874fdbb3dc6"\n);\n// ["Patient", "84d5d265-27ff-45a5-b449-8874fdbb3dc6", "read", undefined]\n')))}d.isMDXComponent=!0},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),i=n(6010),o=n(2389),u=n(7392),s=n(7094),l=n(2466);const p="tabList__CuJ",h="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:o,values:c,groupId:d,className:m}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,u.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==k&&!y.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,s.U)(),[N,C]=(0,r.useState)(k),w=[],{blockElementScrollPositionUntilNextRender:q}=(0,l.o5)();if(null!=d){const e=b[d];null!=e&&e!==N&&y.some((t=>t.value===e))&&C(e)}const F=e=>{const t=e.currentTarget,n=w.indexOf(t),a=y[n].value;a!==N&&(q(t),C(a),null!=d&&v(d,String(a)))},Q=e=>{let t=null;switch(e.key){case"Enter":F(e);break;case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},y.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:Q,onClick:F},o,{className:(0,i.Z)("tabs__item",h,o?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}}}]);