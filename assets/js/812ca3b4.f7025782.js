"use strict";(self.webpackChunk_bonfhir_docs=self.webpackChunk_bonfhir_docs||[]).push([[131],{876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||o;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7896),r=(n(2784),n(876));const o={sidebar_position:2},l="Medplum DevBox",i={unversionedId:"integrations/medplum-devbox",id:"integrations/medplum-devbox",title:"Medplum DevBox",description:"This one is not a NPM package, but a Docker image destined to run Medplum locally, in development mode.",source:"@site/packages/integrations/medplum-devbox.md",sourceDirName:"integrations",slug:"/integrations/medplum-devbox",permalink:"/packages/integrations/medplum-devbox",draft:!1,editUrl:"https://github.com/bonfhir/bonfhir/tree/main/packages/docs/packages/integrations/medplum-devbox.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Medplum",permalink:"/packages/integrations/medplum"},next:{title:"CMS.gov",permalink:"/packages/integrations/cmsdotgov"}},p={},s=[{value:"Get started",id:"get-started",level:2},{value:"Ports",id:"ports",level:2},{value:"Credentials",id:"credentials",level:2},{value:"Default user:",id:"default-user",level:3},{value:"Default application:",id:"default-application",level:3}],m={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"medplum-devbox"},"Medplum DevBox"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ghcr.io/bonfhir/medplum-devbox\n")),(0,r.kt)("p",null,"This one is not a NPM package, but a Docker image destined to run ",(0,r.kt)("a",{parentName:"p",href:"https://www.medplum.com/"},"Medplum")," locally, in ",(0,r.kt)("strong",{parentName:"p"},"development")," mode."),(0,r.kt)("p",null,"Differences with the ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/medplum/medplum-server"},"official medplum docker image"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Runs ",(0,r.kt)("strong",{parentName:"li"},"BOTH")," the server ",(0,r.kt)("strong",{parentName:"li"},"AND")," the front-end app concurrently, so that once it's started you can ",(0,r.kt)("a",{parentName:"li",href:"http://localhost:3000"},"connect to the app")," right away"),(0,r.kt)("li",{parentName:"ul"},"Automatically seeds a ",(0,r.kt)("inlineCode",{parentName:"li"},"ClientApplication")," with default, stable ",(0,r.kt)("a",{parentName:"li",href:"#default-application"},"credentials")," in addition to the ",(0,r.kt)("a",{parentName:"li",href:"#default-user"},"default medplum user")),(0,r.kt)("li",{parentName:"ul"},"Multi-arch: ",(0,r.kt)("inlineCode",{parentName:"li"},"arm64")," in addition to ",(0,r.kt)("inlineCode",{parentName:"li"},"amd64")," to support running smoothly on Apple Silicon as well as X86")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"DO NOT USE IN PRODUCTION"),"."),(0,r.kt)("p",null,"This image exists to support local development workflows easily. The fact that it has a default application configured\nmeans that you should never use this in production."),(0,r.kt)("h2",{id:"get-started"},"Get started"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  medplum:\n    image: ghcr.io/bonfhir/medplum-devbox:latest\n    depends_on:\n      - redis\n      - postgres\n    ports:\n      - "3000:3000"\n      - "8103:8103"\n    volumes:\n      - ./medplum.config.json:/workspace/packages/server/medplum.config.json\n\n  postgres:\n    image: postgres:12-bullseye\n    command: postgres -c config_file=/usr/local/etc/postgres/postgres.conf\n    environment:\n      - POSTGRES_USER=medplum\n      - POSTGRES_PASSWORD=medplum\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres.conf:/usr/local/etc/postgres/postgres.conf\n      - ./load_extensions.sql:/docker-entrypoint-initdb.d/load_extensions.sql\n\n  redis:\n    image: redis:6-bullseye\n    command: redis-server --requirepass medplum\n    ports:\n      - "6379:6379"\n\nvolumes:\n  postgres_data:\n')),(0,r.kt)("p",null,"Example of content for the volume-mounted files can be found here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bonfhir/medplum-devbox/blob/main/medplum/medplum.config.json"},(0,r.kt)("inlineCode",{parentName:"a"},"medplum.config.json"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bonfhir/medplum-devbox/blob/main/postgres/postgres.conf"},(0,r.kt)("inlineCode",{parentName:"a"},"postgres.conf"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bonfhir/medplum-devbox/blob/main/postgres/load_extensions.sql"},(0,r.kt)("inlineCode",{parentName:"a"},"load_extensions.sql")))),(0,r.kt)("h2",{id:"ports"},"Ports"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:3000"),": Medplum app"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8103"),": Medplum server")),(0,r.kt)("h2",{id:"credentials"},"Credentials"),(0,r.kt)("h3",{id:"default-user"},"Default user:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Username"),": ",(0,r.kt)("a",{parentName:"li",href:"mailto:admin@example.com"},"admin@example.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Password"),": medplum_admin")),(0,r.kt)("h3",{id:"default-application"},"Default application:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client ID"),": f54370de-eaf3-4d81-a17e-24860f667912"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Client Secret"),": 75d8e7d06bf9283926c51d5f461295ccf0b69128e983b6ecdd5a9c07506895de")))}d.isMDXComponent=!0}}]);