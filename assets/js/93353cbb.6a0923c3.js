"use strict";(self.webpackChunk_bonfhir_docs=self.webpackChunk_bonfhir_docs||[]).push([[491],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(4866),o=n(5162);const l={sidebar_position:1},s="Core",c={unversionedId:"foundation/core",id:"foundation/core",title:"Core",description:"npm",source:"@site/packages/foundation/core.md",sourceDirName:"foundation",slug:"/foundation/core",permalink:"/packages/foundation/core",draft:!1,editUrl:"https://github.com/bonfhir/bonfhir/tree/main/packages/docs/packages/foundation/core.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Foundation",permalink:"/packages/category/foundation"},next:{title:"Terminology",permalink:"/packages/foundation/terminology"}},u={},p=[{value:"Builders &amp; narrative generators",id:"builders--narrative-generators",level:2},{value:"Resources merge",id:"resources-merge",level:2},{value:"FHIR Client interface",id:"fhir-client-interface",level:2},{value:"FHIR Client decorator",id:"fhir-client-decorator",level:3},{value:"<code>createOr</code> utility",id:"createor-utility",level:3},{value:"<code>searchAllPages</code> utility",id:"searchallpages-utility",level:3},{value:"<code>searchByPage</code> utility",id:"searchbypage-utility",level:3},{value:"Standard Operations Types",id:"standard-operations-types",level:3},{value:"FHIR Search",id:"fhir-search",level:2},{value:"Resources search",id:"resources-search",level:3},{value:"Generic search builder",id:"generic-search-builder",level:3},{value:"Bundle navigator",id:"bundle-navigator",level:2},{value:"Data Types Adapter",id:"data-types-adapter",level:2},{value:"Timeline builder",id:"timeline-builder",level:2}],d={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"core"},"Core"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@bonfhir/core"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@bonfhir/core",alt:"npm"}))),(0,a.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @bonfhir/core\n"))),(0,a.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @bonfhir/core\n")))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," package provides utilities to easily manipulate FHIR resources.\nIt is also used as a common dependency for all other packages to rely on."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://github.com/bonfhir/bonfhir/blob/main/packages/core/CHANGELOG.md"},"Change Log"))),(0,a.kt)("h2",{id:"builders--narrative-generators"},"Builders & narrative generators"),(0,a.kt)("p",null,"As specified in the ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/narrative.html"},"FHIR ",(0,a.kt)("inlineCode",{parentName:"a"},"Narrative")," description"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Any resource that is a DomainResource (all resources except Bundle, Parameters and Binary) may include a\nhuman-readable narrative that contains a summary of the resource and may be used to represent the content\nof the resource to a human.")),(0,a.kt)("p",null,"The package provide a function to generate such ",(0,a.kt)("inlineCode",{parentName:"p"},"Narrative")," using the content of the resource:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import type { Patient } from "fhir/r4";\nimport { narrative } from "@bonfhir/core/r4b";\n\nconst patient: Patient = ...;\n\npatient.text = narrative(patient);\n')),(0,a.kt)("p",null,"Narratives are generated using resources elements that are marked with the\n",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.isSummary"},(0,a.kt)("strong",{parentName:"a"},"\u03a3")," (",(0,a.kt)("inlineCode",{parentName:"a"},"isSummary"),") element definition"),"."),(0,a.kt)("p",null,"In order to simplify building the resources, a convenient builder is provided that invokes the ",(0,a.kt)("inlineCode",{parentName:"p"},"narrative")," generator\nautomatically:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { build } from "@bonfhir/core/r4b";\n\nconst organization = build("Organization", { name: "Acme, Inc." });\n')),(0,a.kt)("h2",{id:"resources-merge"},"Resources merge"),(0,a.kt)("p",null,"It is sometime convenient to be able to recursively merge 2 resources definitions in a non-destructive fashion.\nThis is particularly useful in data-integration scenarios, where the same resource might be ingested at different time\nand we want to add updates to it, without loosing other potential modifications that occur in between."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," package provides a utility function to merge resources together:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import type { Claim } from "fhir/r4";\nimport { merge } from "@bonfhir/core/r4b";\n\nconst originalClaim: Claim = ...;\nconst newClaim: Claim = ...;\n\nconst result = merge({\n  current: originalClaim,\n  incoming: newClaim\n});\n\nresult.isUpdated; // True if the incoming resource impacted the current, so the result is different that the current\nresult.merged; // The final, merged entity.\n')),(0,a.kt)("p",null,"Merging is deeply recursive. Elements are de-duplicated based on their ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property (for both ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/resource-definitions.html#Resource.id"},(0,a.kt)("inlineCode",{parentName:"a"},"Resource"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/element-definitions.html#Element.id"},(0,a.kt)("inlineCode",{parentName:"a"},"Element")),").\nIf not ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," property is present, a strict attribute compare is used to identify duplicate elements."),(0,a.kt)("p",null,"If you want a stable deep-merge that will consistently update values, use stable ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," fields on all resources and elements."),(0,a.kt)("p",null,"The narrative is re-generated automatically for the merged result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import type { Claim } from "fhir/r4";\nimport { build, merge } from "@bonfhir/core/r4b";\n\nconst current = build("Person", {\n  name: [\n    {\n      id: "main-id",\n      use: "official",\n      family: "Simpson"\n    },\n  ]\n});\n\nconst incoming = build("Person", {\n  name: [\n    {\n      id: "main-id",\n      given: ["Homer"],\n    },\n    {\n      id: "alternate-id",\n      use: "old",\n      family: "Power"\n      given: ["Max"],\n    },\n  ]\n});\n\nconst result = merge({ current, incoming: newClaim });\n\nresult === {\n  isUpdated: true,\n  merged: {\n    resourceType: "Person",\n    name: [\n    {\n      id: "main-id",\n      use: "official",\n      family: "Simpson"\n      given: ["Homer"],\n    },\n    {\n      id: "alternate-id",\n      use: "old",\n      family: "Power"\n      given: ["Max"],\n    },\n  ]\n  }\n};\n')),(0,a.kt)("h2",{id:"fhir-client-interface"},"FHIR Client interface"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," package provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"FhirRestfulClient")," interface that matches with the ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/http.html"},"official FHIR RESTful API"),"."),(0,a.kt)("p",null,"The idea is that all Bonfhir packages, and maybe your own implementation too, can take a dependency on that type instead\nof a concrete client implementation, that depends on a specific FHIR server. This is a good way to ensure portability\nof implementations."),(0,a.kt)("p",null,"This can also simplify unit testing by offering a simple interface to mock."),(0,a.kt)("p",null,"Concrete implementations can be found in ",(0,a.kt)("a",{parentName:"p",href:"/packages/integrations/medplum"},"Integrations")," packages, or can be built quite easily yourself."),(0,a.kt)("h3",{id:"fhir-client-decorator"},"FHIR Client decorator"),(0,a.kt)("p",null,"A utility function is provided to be able to decorate a ",(0,a.kt)("inlineCode",{parentName:"p"},"FhirRestfulClient"),", to intercept calls made to it.\nThis can be helpful to log calls, or record resources elsewhere for example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { decorateFhirRestfulClient, FhirRestfulClient, FhirRestfulClientInterceptor } from "@bonfhir/core/r4b";\n\nconst client: FhirRestfulClient = ...;\nconst interceptor: FhirRestfulClientInterceptor = {\n  read: async (originalClient, [type, id]) => {\n    console.log(`Reading ${type}/${id}...`)\n    const result = await originalClient.read(type, id);\n    console.log(`Read ${type}/${id}: ${result?.text?.div}`);\n    return result;\n  },\n  search: ...\n}\n\nconst decoratedClient = decorateFhirRestfulClient(client, interceptor);\nawait decoratedClient.read(...);\n')),(0,a.kt)("h3",{id:"createor-utility"},(0,a.kt)("inlineCode",{parentName:"h3"},"createOr")," utility"),(0,a.kt)("p",null,"Often time there is a need to create, add, update or merge a resource on a server depending on it's prior existence.\nThis is a very common occurrence in data integration scenarios / syncing tasks."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," package provide a utility to help with those operations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { build, createOr, resourceSearch } from "@bonfhir/core/r4b";\nimport { KnownIdentifierSystems } from "@bonfhir/terminology/r4b";\n\n\nconst resource = build("Patient", {\n  identifier: [\n    {\n      ...KnownIdentifierSystems.USSocialSecurityNumber,\n      value: "000000000",\n    },\n  ],\n  ...\n});\n\n// Will return the existing resource on the server if it exists, or create a new one\n// Search is performed by default using the identifiers.\nconst [mergedResource, wasMerged] = createOr("return", client, resource);\n\n// Will replace entirely the existing resource on the server if it exists, or create a new one\n// Search is performed by default using the identifiers.\nconst [mergedResource, wasMerged] = createOr("replace", client, resource);\n\n// Will merge the existing resource on the server with the one here, or create a new one if not found\n// Search is performed by default using the identifiers.\nconst [mergedResource, wasMerged] = createOr("merge", client, resource);\n\n// Will add a new resource, unless there is an existing one with a strict equality except for the `id` property (avoid strict duplicates).\n// Search is performed by default using the identifiers.\nconst [mergedResource, wasMerged] = createOr("add", client, resource);\n\n// The search can be customized (instead of using the default identifiers)\nconst [mergedResource, wasMerged] = createOr("merge", client, resource, resourceSearch("Patient").name("John Doe").href);\n\n')),(0,a.kt)("h3",{id:"searchallpages-utility"},(0,a.kt)("inlineCode",{parentName:"h3"},"searchAllPages")," utility"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"searchAllPages")," utility can be used to retrieve ",(0,a.kt)("em",{parentName:"p"},"all")," pages for a given search criteria."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Be careful as this may be a very long / very expensive operation.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { searchAllPages, resourceSearch, linkUrl } from "@bonfhir/core/r4b";\n\nconst allPatients = await searchAllPages(\n  client,\n  "Patient",\n  resourceSearch("Patient").href\n);\n\n// For paginating yourself\nconst searchResult = await client.search("Patient");\nconst searchPatientPage2 =\n  linkUrl(searchResult, "next") &&\n  (await client.get(linkUrl(searchResult, "next")));\nconst backPage = linkUrl(searchPatientPage2, "previous");\n')),(0,a.kt)("h3",{id:"searchbypage-utility"},(0,a.kt)("inlineCode",{parentName:"h3"},"searchByPage")," utility"),(0,a.kt)("p",null,"Similar to the ",(0,a.kt)("a",{parentName:"p",href:"#searchallpages-utility"},(0,a.kt)("inlineCode",{parentName:"a"},"searchAllPages")),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"searchByPage")," utility will retrieve all pages for a\ngiven search, but instead of collecting and returning the whole result set at once, it will invoke a callback for\neach page. The callback is awaited so it can be a promise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { searchByPage } from "@bonfhir/core/r4b";\n\nawait searchByPage(\n  client,\n  "Patient",\n  resourceSearch("Patient")._count(100)._total("accurate").href,\n  async ({ bundle, nav }) => {\n    for (const patient of nav.resources) {\n      // ...\n    }\n  }\n);\n')),(0,a.kt)("h3",{id:"standard-operations-types"},"Standard Operations Types"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," library contains types for the ",(0,a.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/operationslist.html"},"standard FHIR Operations"),"\nparameters and results:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import type {\n  ValueSetExpandOperationParameters,\n  ValueSetExpandOperationResult,\n} from "@bonfhir/core/r4b";\n\nconst valueSet = await client.execute<\n  ValueSetExpandOperationResult,\n  ValueSetExpandOperationParameters\n>("$expand", {\n  type: "ValueSet",\n  parameters: { url: "http://hl7.org/fhir/ValueSet/address-use" },\n});\n')),(0,a.kt)("h2",{id:"fhir-search"},"FHIR Search"),(0,a.kt)("p",null,"There are utility functions designed to help creating ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/search.html"},"FHIR Search")," URL query parameters."),(0,a.kt)("h3",{id:"resources-search"},"Resources search"),(0,a.kt)("p",null,"The easiest way is to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"resourceSearch")," helper method, as it provides typing for all resources, based on the search parameters specification:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { resourceSearch } from "@bonfhir/core/r4b";\n\nresourceSearch("Organization").identifier("12345").active("true").href;\nresourceSearch("Patient").identifier({\n  system: "http://hl7.org/fhir/sid/us-ssn",\n  value: "000-00-0000",\n}).href;\nresourceSearch("Account").status("active").type("patient")._tag({\n  system: "source",\n  value: "foo",\n}).href;\n')),(0,a.kt)("p",null,"If any search parameter is missing from the builder, you can always drop down to a\n",(0,a.kt)("a",{parentName:"p",href:"#generic-search-builder"},"Generic search")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"builder")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'resourceSearch("Organization").identifier("12345").builder.string("_count", 20)\n  .href;\n')),(0,a.kt)("h3",{id:"generic-search-builder"},"Generic search builder"),(0,a.kt)("p",null,"In addition to the resource-typed searches, there is a generic search builder that exposes the fundamental ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/search.html#ptypes"},"FHIR Search Parameter Types"),"\nto help compose FHIR searches as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { fhirSearch } from "@bonfhir/core/r4b";\n\nfhirSearch().token("identifier", "152345235").href;\nfhirSearch().date("date", "2010-01-01", "ge").date("date", "2011-12-31", "le")\n  .href;\nfhirSearch().date("date", "2010-01-01", "ge").date("date", "2011-12-31", "le")\n  .href;\nfhirSearch().reference(\n  "subject",\n  { system: "http://acme.org/fhir/identifier/mrn", value: "123456" },\n  ":identifier"\n).href;\n')),(0,a.kt)("h2",{id:"bundle-navigator"},"Bundle navigator"),(0,a.kt)("p",null,"It can be hard sometime to extract and navigate a ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/bundle.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Bundle")),", when it is the result of a complex ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/search.html"},"Search operation"),"."),(0,a.kt)("p",null,"The primary resources are returned along with ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/search.html#include"},(0,a.kt)("inlineCode",{parentName:"a"},"_include"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/search.html#revinclude"},(0,a.kt)("inlineCode",{parentName:"a"},"_revinclude")),",\nthat must be resolved via ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/references.html"},(0,a.kt)("inlineCode",{parentName:"a"},"references")),".\nAdditionally, naive implementations can lead to O(N",(0,a.kt)("sup",null,"2"),") complexity when processing ",(0,a.kt)("inlineCode",{parentName:"p"},"_revinclude")," resources for example."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"bundleNavigator")," helper can help with this by providing lazy indexing and search on top of a bundle to extract resources efficiently:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  buildReferenceFromResource,\n  bundleNavigator,\n  fhirSearch,\n} from "@bonfhir/core/r4b";\n\nconst bundle = await client.search(\n  "Patient",\n  resourceSearch("Patient")\n    ._include("Patient", "managingOrganization")\n    ._revinclude("Provenance", "target")\n    ._include("Provenance", "agent", { iterate: true })\n);\n\nconst navigator = bundleNavigator<Patient, Organization | Provenance>(bundle);\nfor (const patient of navigator.searchMatch()) {\n  const managingOrganization = navigator.reference(\n    patient?.managingOrganization?.reference\n  );\n  const provenance = navigator.firstRevReference<Provenance>(\n    (provenance) => provenance.target,\n    buildReferenceFromResource(patient).reference\n  );\n  const provenanceOrganization = navigator.reference(\n    provenance?.agent[0]?.who.reference\n  );\n}\n')),(0,a.kt)("p",null,"In this example, the bundle is only iterated twice:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"once to index the results for the calls to ",(0,a.kt)("inlineCode",{parentName:"li"},"searchMatch")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"reference")),(0,a.kt)("li",{parentName:"ul"},"a second time to create the on-the-fly index for the ",(0,a.kt)("inlineCode",{parentName:"li"},"firstRevReference"))),(0,a.kt)("p",null,"The reverse references also create indices that can be reused in loops, assuming the select function is the same (the cache key is the function ",(0,a.kt)("inlineCode",{parentName:"p"},"toString()")," method)."),(0,a.kt)("p",null,"All indices are created lazily, so it is very cheap to create / return a ",(0,a.kt)("inlineCode",{parentName:"p"},"bundleNavigator")," even if it is not used subsequently."),(0,a.kt)("h2",{id:"data-types-adapter"},"Data Types Adapter"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," package includes a utility to parse and format, with support for localization, all standard ",(0,a.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/datatypes.html"},"FHIR Data Types"),"."),(0,a.kt)("p",null,"The utility uses the standard ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"},(0,a.kt)("inlineCode",{parentName:"a"},"Intl"))," API and provides a formatter with multiple options for each data types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { intlFhirDataTypeAdapter } from "@bonfhir/core/r4b";\n\nconst adapter = intlFhirDataTypeAdapter("en-us"); // or intlFhirDataTypeAdapter() to use the current locale (e.g. in a browser)\n\nadapter.date.format("2023-12-31");\n// "12/31/2023"\nadapter.date.format("2023-12-31", { dateStyle: "full" });\n// "Wednesday, February 8, 2023"\nadapter.date.format("2023-12-31", { dateStyle: "medium" });\n// "Feb 8, 2023"\nadapter.date.format("2023-12-31", { dateStyle: "relative" });\n// "3 days ago"\n\nconst zhAdapter = intlFhirDataTypeAdapter("zh-Hans-CN-u-nu-hanidec");\nadapter.decimal.format("123456.78900");\n// "\u4e00\u4e8c\u4e09,\u56db\u4e94\u516d.\u4e03\u516b\u4e5d\u3007\u3007"\n\nconst patient: Patient = {...};\nadapter.humanName.format(patient.name, { style: "short", max: 1, useFilterOrder: ["official", "usual"] });\n// Outputs a single HumanName, only for official or usual use, favoring official first.\n')),(0,a.kt)("p",null,"Each data type adapter provides multiple options that should fit most of the needs of an application.\nIf you are looking for a specific option, having a look at the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bonfhir/bonfhir/tree/main/packages/core/r4b/data-types"},"unit tests")," may help."),(0,a.kt)("p",null,"The adapter also comes with a tag function (template literal) that can be used to directly invoke adapters to compose messages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { intlFhirDataTypeAdapter } from "@bonfhir/core/r4b";\n\nconst patient: Patient = {...};\nconst adapter = intlFhirDataTypeAdapter("en-us");\n\nadapter.message`Patient ${[patient.name, "humanName", { style: "shorter", max: 1 }]} was born on ${[patient.birthDate, "date", { dateStyle: "long"}]}.`;\n// "Patient John was born on February 2, 1954."\n\n')),(0,a.kt)("h2",{id:"timeline-builder"},"Timeline builder"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"buildTimelineOfResourcesWithPeriods")," can compute blocks of time where resources can be placed, assuming you can project them into a ",(0,a.kt)("inlineCode",{parentName:"p"},"Period"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { build, buildTimelineOfResourcesWithPeriods } from "@bonfhir/core/r4b";\n\nconst resources = [\n  build("MedicationDispense", {\n    status: "completed",\n    daysSupply: { value: 30 },\n    whenHandedOver: "2021-01-01",\n  }),\n  build("MedicationDispense", {\n    status: "completed",\n    daysSupply: { value: 30 },\n    whenHandedOver: "2021-01-15",\n  }),\n  build("MedicationDispense", {\n    status: "completed",\n    daysSupply: { value: 90 },\n    whenHandedOver: "2021-01-01",\n  }),\n  build("MedicationDispense", {\n    status: "completed",\n    daysSupply: { value: 15 },\n    whenHandedOver: "2021-03-01",\n  }),\n];\n\nconst result = buildTimelineOfResourcesWithPeriods({\n  resources,\n  periodFn: resource => ({\n    start: resource.whenHandedOver!,\n    end: addDays(\n      new Date(resource.whenHandedOver!),\n      resource.daysSupply!.value!\n    )\n      .toISOString()\n      .slice(0, 10),\n  }),\n});\n\n// result\n{\n  blocks: [\n    {\n      period: {\n        start: "2021-01-01",\n        end: "2021-01-15",\n      },\n      items: [resources[0]],\n    },\n    {\n      period: {\n        start: "2021-01-15",\n        end: "2021-01-31",\n      },\n      items: [resources[0], resources[1]],\n    },\n    {\n      period: {\n        start: "2021-01-31",\n        end: "2021-02-14",\n      },\n      items: [resources[1]],\n    },\n  ],\n}\n')))}h.isMDXComponent=!0},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),i=n(6010),o=n(2466),l=n(6550),s=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,c]=m({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),g=(()=>{const e=s??p;return h({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,i]),tabValues:i}}var g=n(2389);const y="tabList__CuJ",b="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==l&&(p(t),s(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:d},o,{className:(0,i.Z)("tabs__item",b,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=f(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y)},a.createElement(k,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}}}]);