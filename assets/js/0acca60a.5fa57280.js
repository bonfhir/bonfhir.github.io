"use strict";(self.webpackChunk_bonfhir_docs=self.webpackChunk_bonfhir_docs||[]).push([[463],{876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,f=c["".concat(o,".").concat(h)]||c[h]||d[h]||s;return a?n.createElement(f,i(i({ref:t},u),{},{components:a})):n.createElement(f,i({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5791:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(7896),r=(a(2784),a(876)),s=a(1112),i=a(2009);const l={sidebar_position:3},o="Test Support",p={unversionedId:"foundation/test-support",id:"foundation/test-support",title:"Test Support",description:"npm",source:"@site/packages/foundation/test-support.md",sourceDirName:"foundation",slug:"/foundation/test-support",permalink:"/packages/foundation/test-support",draft:!1,editUrl:"https://github.com/bonfhir/bonfhir/tree/main/packages/docs/packages/foundation/test-support.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Terminology",permalink:"/packages/foundation/terminology"},next:{title:"Codegen",permalink:"/packages/foundation/codegen"}},u={},c=[{value:"Fakes",id:"fakes",level:2},{value:"Synthetic data",id:"synthetic-data",level:2}],d={toc:c};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"test-support"},"Test Support"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@bonfhir/test-support",alt:"npm"})),(0,r.kt)(s.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @bonfhir/test-support\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @bonfhir/test-support\n")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"test-support")," package is dedicated to resources that are useful in the context of automated tests and/or data generation."),(0,r.kt)("h2",{id:"fakes"},"Fakes"),(0,r.kt)("p",null,"It is sometime useful to be able to generate random resources with somewhat plausible data.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"fake")," helper method can generate fake but valid ",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/resourcelist.html"},"FHIR Resources")," that can be used during unit testing for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { fake } from "@bonfhir/test-support/r4b";\n\nconst fakePatient = fake("Patient");\n\n// Force specific attributes values\nconst fakeDeadPatient = fake("Patient", { deceasedBoolean: true });\n')),(0,r.kt)("p",null,"Here is a sample of a fake patient generated during unit testing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  resourceType: "Patient",\n  id: "0203bec7-d723-4b4a-a00b-b2a0d6d4fd8e",\n  identifier: [\n    {\n      use: "temp",\n      type: {\n        coding: [\n          {\n            system: "http://terminology.hl7.org/CodeSystem/v2-0203",\n            code: "SB",\n            display: "Social Beneficiary Identifier",\n          },\n        ],\n        text: "Social Beneficiary Identifier",\n      },\n      system: "http://hl7.org/fhir/sid/us-ssn",\n      value: "eassadf",\n    },\n  ],\n  active: true,\n  name: [\n    {\n      use: "usual",\n      family: "Kumari",\n      given: ["Somphong"],\n    },\n  ],\n  telecom: [\n    {\n      system: "fax",\n      value: "+82 11 678 1078",\n      use: "work",\n    },\n  ],\n  gender: "other",\n  birthDate: "1999-01-06",\n  address: [\n    {\n      use: "home",\n      type: "both",\n      line: ["1302 Frances Groves"],\n      city: "Durwardton",\n      state: "Kent",\n      postalCode: "69760-6341",\n    },\n  ],\n  text: {\n    status: "generated",\n    div: \'<div xmlns="http://www.w3.org/1999/xhtml" class="fhir-narrative"><ul><li><span class="fhir-attr">Id: </span><span class="fhir-value">0203bec7-d723-4b4a-a00b-b2a0d6d4fd8e</span></li><li><span class="fhir-attr">Identifier: </span><ul><li><ul><li><span class="fhir-attr">Type: </span><ul><li><span class="fhir-attr">Coding: </span><ul><li><ul><li><span class="fhir-attr">System: </span><span class="fhir-value">http://terminology.hl7.org/CodeSystem/v2-0203</span></li><li><span class="fhir-attr">Display: </span><span class="fhir-value">Social Beneficiary Identifier</span></li></ul></li></ul></li><li><span class="fhir-attr">Text: </span><span class="fhir-value">Social Beneficiary Identifier</span></li></ul></li><li><span class="fhir-attr">System: </span><span class="fhir-value">http://hl7.org/fhir/sid/us-ssn</span></li><li><span class="fhir-attr">Value: </span><span class="fhir-value">e</span></li></ul></li></ul></li><li><span class="fhir-attr">Active: </span><span class="fhir-value">true</span></li><li><span class="fhir-attr">Name: </span><ul><li><ul><li><span class="fhir-attr">Family: </span><span class="fhir-value">Kumari</span></li><li><span class="fhir-attr">Given: </span><span class="fhir-value">Somphong</span></li></ul></li></ul></li><li><span class="fhir-attr">Telecom: </span><ul><li><ul><li><span class="fhir-attr">Value: </span><span class="fhir-value">+82 11 678 1078</span></li></ul></li></ul></li><li><span class="fhir-attr">Birth Date: </span><span class="fhir-value">2023-01-06</span></li><li><span class="fhir-attr">Address: </span><ul><li><ul><li><span class="fhir-attr">Line: </span><span class="fhir-value">1302 Frances Groves</span></li><li><span class="fhir-attr">City: </span><span class="fhir-value">Durwardton</span></li><li><span class="fhir-attr">State: </span><span class="fhir-value">Kent</span></li><li><span class="fhir-attr">Postal Code: </span><span class="fhir-value">69760-6341</span></li></ul></li></ul></li></ul></div>\',\n  },\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"It is important to understand that all values are completely random (generated with the help of ",(0,r.kt)("a",{parentName:"strong",href:"https://ngneat.github.io/falso/"},"Falso"),").\nSo while resources may be ",(0,r.kt)("em",{parentName:"strong"},"valid"),", they are certainly not ",(0,r.kt)("em",{parentName:"strong"},"semantically correct")," (i.e. they do not accurately represent coherent clinical data).\nIf that's what you need, you may want to use the ",(0,r.kt)("a",{parentName:"strong",href:"#synthetic-data"},"Synthetic data")," support.")),(0,r.kt)("h2",{id:"synthetic-data"},"Synthetic data"),(0,r.kt)("p",null,"As an alternative to ",(0,r.kt)("a",{parentName:"p",href:"#fakes"},"fakes"),", it is possible to leverage clinically-sensible data by using ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Synthetic_data"},"synthetic data"),"."),(0,r.kt)("p",null,"For this, we first need a data source for the synthetic data. It must be in the form of FHIR R4 Bundles.\nWe do recommend using the data provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://synthea.mitre.org/"},"SyntheticMass project using Synthea",(0,r.kt)("sup",null,"TM")),"."),(0,r.kt)("p",null,"So go ahead and ",(0,r.kt)("a",{parentName:"p",href:"https://synthea.mitre.org/downloads"},"download some synthetic data")," in the FHIR R4 format.\nBe mindful of the size of the data, specifically if you plan to commit it to your repo.\nWe recommend to start with a subset of their sample patients."),(0,r.kt)("p",null,"Then, copy those bundles into a folder in your source code.\nYou can now use the data in your tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { syntheticGenerator } from "@bonfhir/test-support/r4b";\n\n// Initializing the generator once ensure that the loading of files is done only once for all synthetic searches.\nconst synthetic = syntheticGenerator(\n  "<path to the synthetic data folder>/*.json"\n);\n\nconst randomSyntheticPatient = await synthetic("Patient");\nconst randomSyntheticClaim = await synthetic("Claim");\n\n// You can even look for specific conditions using FHIR Path\nconst randomSyntheticObservationOfLargeBodyMassIndex = await synthetic(\n  "Observation",\n  {\n    fhirPath:\n      "code.coding.code=\'39156-5\' and valueQuantity.value > 25 and valueQuantity.unit = \'kg/m2\'",\n  }\n);\n\n// And as for fakes, override specific values at will\nawait synthetic("Patient", { override: { deceasedBoolean: true } });\n')))}h.isMDXComponent=!0},2009:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(2784),r=a(6277);const s="tabItem_OMyP";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:a},t)}},1112:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7896),r=a(2784),s=a(6277),i=a(9741),l=a(2244),o=a(8963),p=a(4126);const u="tabList_M0Dn",c="tabItem_ysIP";function d(e){const{lazy:t,block:a,defaultValue:i,values:d,groupId:h,className:f}=e,m=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??m.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,l.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===i?i:i??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==v&&!y.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:k}=(0,o.U)(),[w,N]=(0,r.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=h){const e=g[h];null!=e&&e!==w&&y.some((t=>t.value===e))&&N(e)}const O=e=>{const t=e.currentTarget,a=T.indexOf(t),n=y[a].value;n!==w&&(S(t),N(n),null!=h&&k(h,String(n)))},I=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},f)},y.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:I,onClick:O},i,{className:(0,s.Z)("tabs__item",c,i?.className,{"tabs__item--active":w===t})}),a??t)}))),t?(0,r.cloneElement)(m.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},m.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function h(e){const t=(0,i.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}}}]);